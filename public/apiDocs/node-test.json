{
    "swagger": "2.0",
    "info": {
        "description": "El API permitirá registrar, consultar, modificar y eliminar datos del sistema de información de la  Institución Educativa. Las funcionalidades estarán asociadas a las entidades de Estudiante, Docente y Curso.",
        "version": "1.0.0",
        "title": "School REST API"
    },
    "host": "localhost:3000",
    "basePath": "/data",
    "tags": [{
        "name": "CRUD",
        "description": "Registra, consulta, modifica y elimina entidades",
    }],
    "schemes": ["http"],
    "paths": {
        "/create": {
            "post": {
                "tags": ["CRUD"],
                "summary": "Registra una nueva entidad al sistema de información",
                "description": "",
                "operationId": "createEntity",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "entity",
                    "in": "body",
                    "description": "Entidad que se desea registrar",
                    "required": true,
                    "items": {
                        "type": "string",
                        "enum": ["Students", "Teachers", "Courses"]
                    }
                },{
                    "name": "elementData",
                    "in": "body",
                    "type":"object",
                    "description": "Objeto representando la entidad a registrar",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Order"
                    }
                }],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            },
        },
        "/pet/findByStatus": {
            "get": {
                "tags": ["pet"],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findPetsByStatus",
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "status",
                    "in": "query",
                    "description": "Status values that need to be considered for filter",
                    "required": true,
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": ["available", "pending", "sold"],
                        "default": "available"
                    },
                    "collectionFormat": "multi"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        },
        "/pet/findByTags": {
            "get": {
                "tags": ["pet"],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "tags",
                    "in": "query",
                    "description": "Tags to filter by",
                    "required": true,
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "collectionFormat": "multi"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }],
                "deprecated": true
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": ["pet"],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to return",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [{
                    "api_key": []
                }]
            },
            "post": {
                "tags": ["pet"],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "consumes": ["application/x-www-form-urlencoded"],
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet that needs to be updated",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "name",
                    "in": "formData",
                    "description": "Updated name of the pet",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "status",
                    "in": "formData",
                    "description": "Updated status of the pet",
                    "required": false,
                    "type": "string"
                }],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            },
            "delete": {
                "tags": ["pet"],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": ["application/xml", "application/json"],
                "parameters": [{
                    "name": "api_key",
                    "in": "header",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "petId",
                    "in": "path",
                    "description": "Pet id to delete",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": ["pet"],
                "summary": "uploads an image",
                "description": "",
                "operationId": "uploadFile",
                "consumes": ["multipart/form-data"],
                "produces": ["application/json"],
                "parameters": [{
                    "name": "petId",
                    "in": "path",
                    "description": "ID of pet to update",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }, {
                    "name": "additionalMetadata",
                    "in": "formData",
                    "description": "Additional data to pass to server",
                    "required": false,
                    "type": "string"
                }, {
                    "name": "file",
                    "in": "formData",
                    "description": "file to upload",
                    "required": false,
                    "type": "file"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "security": [{
                    "petstore_auth": ["write:pets", "read:pets"]
                }]
            }
        }
    },
    "definitions": {
        "Student": {
            "type": "object",
            "properties": {
                "givenName": {
                    "type": "string",
                    "description": "Nombres de estudiante"
                },
                "familyName": {
                    "type": "string",
                    "description": "Apellidos de estudiante"
                },
                "personalId": {
                    "type": "string",
                    "description": "Identificación de estudiante"
                },
                "gender": {
                    "type": "string",
                    "description": "Género de estudiante"
                }
            }
        },
        "Teacher": {
            "type": "object",
            "properties": {
                "givenName": {
                    "type": "string",
                    "description": "Nombres del docente"
                },
                "familyName": {
                    "type": "string",
                    "description": "Apellidos del docente"
                },
                "personalId": {
                    "type": "string",
                    "description": "Identificación del docente"
                },
                "gender": {
                    "type": "string",
                    "description": "Género del docente"
                }
            }
        },
        "Course": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Nombre del curso"
                },
                "courseId": {
                    "type": "string",
                    "description": "Código del curso"
                },
                "observations": {
                    "type": "string",
                    "description": "Observaciones del curso"
                }
            }
        }
    },
    "externalDocs": {
        "description": "App Demo",
        "url": "http://li1115-212.members.linode.com"
    }
}